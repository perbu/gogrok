package fragments

import (
	"github.com/perbu/gogrok/analytics"
	"fmt"
)

templ About() {
    <div>
        <h1>About Grogrok</h1>
        <p>Gogrok is a cross-module analysis tool for Go.</p>
    </div>
    }

templ ExternalModules(mods []analytics.Module) {
    <div id="module">
    <h2>External Modules</h2>
    <ul>
    for _, mod := range mods {
        <h3>
        {mod.Path}
        </h3>
         <ul>
            for _, rmod := range mod.ReverseModuleDependencies {
                <li><a href="#" hx-get={moduleUrl(rmod)} hx-target="#module">{rmod.Path}</a></li>
            }
        </ul>
    }
    </ul>
    </div>
    <div class="container" id="package">
      <!-- placeholder for package details -->
    </div>
}

templ LocalModules(mods []analytics.Module) {
    <div id="module">
    <h2>Local Modules</h2>
    <ul>
    for _, mod := range mods {
        <li>
            <a href="#" hx-get={moduleUrl(&mod)} hx-target="#module"
            >{mod.Path}</a> - {mod.Latest()} - Complexity {fmt.Sprintf("%.1f", mod.CalculateComplexity())} -  {slen(mod.Dependencies)} dependencies, has
            {slen(mod.ReverseModuleDependencies)} reverse dependencies. {s(mod.Files())} files, {s(mod.Lines())} lines.
        </li>
    }
    </ul>
    </div>
    <div class="container" id="package">
      <!-- placeholder for package details -->
    </div>
}

templ Module(mod *analytics.Module) {
    <div id="module">
        <h3>{mod.Path}</h3>
        <p>
            Versions in use:
            <ul>
            for _, v := range mod.GetVersions() {
                <li>{v}&nbsp;</li>
            }
            </ul>
        </p>
        <p>
            {slen(mod.Dependencies)} dependencies, has {slen(mod.ReverseModuleDependencies)} reverse dependencies.
        </p>
        <p>
            {s(mod.Files())} files, {s(mod.Lines())} lines.
        </p>
        <p>
        Reverse dependencies:
        <ul>
        for _, rdep := range mod.ReverseModuleDependencies {
            <li>
                <a href="#" hx-get={moduleUrl(rdep)} hx-target="#module">{rdep.Path}</a>
            </li>
        }
        </ul>
        </p>

        <p>
        Dependencies:
        <ul>
        for _, dep := range mod.Dependencies {
            <li>
                <a href="#" hx-get={moduleUrl(dep)} hx-target="#module">{dep.Path}</a>
            </li>
        }
        </ul>
        </p>
        <h4>Packages</h4>
        <ul>
        for _, pkg := range mod.Packages {
            <li><a href="#" hx-get={packageUrl(pkg)} hx-target="#package">[{pkg.Name}]</a>
            {s(pkg.Files())} files, {s(pkg.Lines())} lines. Complexity {fmt.Sprintf("%.1f", pkg.CalculateComplexity())}
            {fmt.Sprintf("%.0f%%", pkg.Generated()*100)} generated code.
            </li>
        }
        </ul>
    </div>
    <div class="container" id="package">
      <!-- placeholder for package details -->
    </div>
}


templ Package(pkg *analytics.Package)  {
    <div id="package">
        <h3>{pkg.Name}</h3>
        <p>
            {s(pkg.Files())} files, {s(pkg.Lines())} lines.
        </p>
        <h4>Reverse Dependencies</h4>
        <ul>
        for _, rpd := range pkg.ReverseDependencies {
           <li>{rpd.Module.Path} / {rpd.Name}</li>
        }
        </ul>
        <h4>Files</h4>
        for _, f := range pkg.GetFiles() {
            <a href="#" hx-get={fileUrl(f)} hx-target="#file">[{f.Name}]</a>&nbsp;
        }
    </div>
    <div class="container" id="file">
      <!-- placeholder for file details -->
    </div>
}

templ File(f *analytics.File) {
    <div id="file">
        <h3>{f.Name}</h3>
        <h4>Content</h4>
        <code>
        <pre>
        for _, l := range f.GetSource() {
            {l}<br/>
        }
        </pre>
        </code>
    </div>
}